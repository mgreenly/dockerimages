#!/bin/bash

# 
# TODO: figure out how to turn this into a stack template
#

if [ "$#" -ne 1 ]; then
  echo "usage: stack-new NAME"
  echo ""
  echo "  NAME - a lower case hyphenated package name"
  echo ""
  exit 1
fi

# the package name is hyphenated lower case
PACKAGE_NAME=${1,,}

# The module name is upper camel cased.  This mess
# splits the package name on hyphens, then appends
# each capitalized word into the module name.
MODULE_NAME=();
IFS='-' read -ra WORDS <<< "$PACKAGE_NAME"
for i in "${WORDS[@]}"; do
    MODULE_NAME=(${MODULE_NAME[@]}${i^})
done
MODULE_NAME="${MODULE_NAME[@]}"

# determine the users name and email from git config
USER_NAME=$(git config user.name)
USER_EMAIL=$(git config user.email)

#
# initialize the project directory
#
if [[ -e $PACKAGE_NAME ]]; then
  echo "ERROR, $PACKAGE_NAME already exists"
  exit 1
fi
mkdir $PACKAGE_NAME
cd $PACKAGE_NAME
mkdir "src" "app" "test"

#
# create the cabal file
#
cat << EOF > $PACKAGE_NAME.cabal
name:                  $PACKAGE_NAME
version:               0.0.1
homepage:              https://github.com/$USER
license:               ISC
license-file:          LICENSE
author:                ${USER_NAME}
maintainer:            ${USER_EMAIL}
build-type:            Simple
cabal-version:         >=1.10

library
  default-language:    Haskell2010
  hs-source-dirs:      src
  exposed-modules:     $MODULE_NAME
  ghc-options:         -O2
                       -threaded
                       "-with-rtsopts=-N"
  build-depends:       base                    >= 4.8


executable $PACKAGE_NAME-app
  default-language:    Haskell2010
  hs-source-dirs:      app
  main-is:             Main.hs
  ghc-options:         -O2
                       -threaded
                       "-with-rtsopts=-N"
  build-depends:       base                    >= 4.8
                       , $PACKAGE_NAME

test-suite $PACKAGE_NAME-test
  type:                exitcode-stdio-1.0
  default-language:    Haskell2010
  hs-source-dirs:      test
  main-is:             Spec.hs
  build-depends:       base
                       , $PACKAGE_NAME
                       , hspec
                       , QuickCheck

source-repository head
  type:               git
  location:           https://github.com/$USER/$PACKAGE_NAME
EOF



#
# create a license file
#
cat << EOF > LICENSE 
Copyright (c) $(date +"%Y") ${USER_NAME}

Permission to use, copy, modify, and/or distribute this software for any purpose
with or without fee is hereby granted, provided that the above copyright notice
and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
THIS SOFTWARE.
EOF



#
# create a project specific .vimrc file
#
cat << EOF > .vimrc
"" build - build project
map <leader>b :exe '!clear && stack build'<CR>
"" clean - clean build artifacts
map <leader>c :exe '!clear && stack clean'<CR>
"" find - lookup where a symbol is defined
map <leader>f "zyiw:exe '!clear && ghc-mod info '.@%.' '.@z<CR>
"" hoogle - search for contents of register 0 (can't include end of line)
map <leader>h :exe '!clear && hoogle "'.@0.'"'<CR>
"" interactive - load modules in repl
map <leader>i :exe '!clear && stack ghci'<CR>
"" lint - lint current file
map <leader>l "zyiw:exe '!clear && hlint -c=auto -s '.@%<CR>
"" run - run program
map <leader>r :exe '!clear && stack build && clear && stack exec $PACKAGE_NAME-app'<CR>
"" spec - run specs
map <leader>s :exe '!clear && stack test'<CR>
"" tags - jump to tag
map <leader>t "zyiw:exe 'tag '.@z<CR>
"" tags - generate tags
map <leader>T :exe '!clear && hasktags --ctags ./src'<CR>
"" undo - return from tag
map <leader>z :exe 'pop'<CR>
EOF


#
#
# create the setup file
#
cat << EOF > Setup.hs
import Distribution.Simple
main = defaultMain
EOF


#
#
# create a gitignore file
#
cat << EOF > .gitignore
/.cabal-sandbox
/client_session_key.aes
/dist
/tags
/TAGS
/*.hp
/*.prof
.DS_Store
.*.sw?
.stack-work
EOF

#
# create sample source files
#
cat << EOF > src/$MODULE_NAME.hs
module $MODULE_NAME
    ( foo
    ) where

foo :: String
foo = "foo"
EOF

#
# create application
#
cat << EOF > app/Main.hs 
module Main where

import $MODULE_NAME (foo)

main = putStrLn foo
EOF

#
# create application
#
cat << EOF > test/Spec.hs 
import Test.Hspec
import Test.QuickCheck
import Control.Exception (evaluate)

import $MODULE_NAME

main :: IO ()
main = hspec $ do
    describe "testing stuff" $ do

        it "foo returns the expected value" $ do
            foo \`shouldBe\` ("foo" :: String)
EOF
