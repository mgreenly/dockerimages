#!/bin/bash

#
# Save this as $HOME/.local/bin/debian-stack and then make sure 
# $HOME/.local/bin is in your path.  This will allow you to use
# the command `debian-stack` any where you would have previously
# used the `stack` command.
# 

if [[ ! -f stack.yaml ]]; then
  echo "Can't find a stack.yaml file.  Cowardly aborting."
  exit
fi

#
# make sure we have the current image 
#
#docker pull mgreenly/debian-stack:latest

#
# the ".stack.debian" directory is mapped into the debian-stack
# image as $HOME/.stack directory so that it doesn't have to
# rebuild everything from scratch every time you run it for
# the project.
#
# Docker doesn't allow build contexts to include directories
# outside the current working directory.  So this script links
# the current users $HOME/.stack.debian direcotory into the
# working project directory if necessary
#
if [[ ! -e $HOME/.stack.debian ]]; then
  mkdir $HOME/.stack.debian
fi

if [[ ! -d .stack.debian ]]; then
  ln -s $HOME/.stack.debian $PWD/.stack.debian
  exit
fi

#
# all arguments given to this script are passed to stack running in the image
#
docker run --rm -i -t \
  -v $PWD/.stack.debian:/home/haskell/.stack  \
  -v $PWD:/project \
  mgreenly/debian-stack:latest \
  stack $@
