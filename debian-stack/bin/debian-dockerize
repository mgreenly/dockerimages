#!/bin/bash

#
# This script tries to create a Dockerfile and build script that will
# run the stack application in the current directory an an Alpine Linux
# base image.
#

if [[ -e ./Dockerfile.debian ]];then
  echo "Dockerfile already exists.  Cowardly refusing to run."
  exit
fi

if [[ -e ./build.debian.sh ]];then
  echo "build.sh already exists.  Cowardly refusing to run."
  exit
fi

if [[ -e ./run.debian.sh ]];then
  echo "run.sh already exists.  Cowardly refusing to run."
  exit
fi

if [[ ! -e ./stack.yaml ]];then
  echo "stack.yaml does not exist.  Cowardly refusing to run."
  exit
fi

#
# This image provides stack running on debian linux.  It's used to
# build the applicaton before copying it into a base image.  This
# image is huge but it's only for development purposes.
#
docker pull mgreenly/debian-stack:latest

#
# the package name defaults to the current directory if one is not provided
#
IMAGE_NAME=${1:-$(basename $PWD)}

#
# The $HOME/.stack.debian directory on the host system is mapped to the ephemeral
# docker guest as $HOME/.stack.  Doing this allows packages to be cached between
# invocations.
#

#
# make sure the directory actually exists on the host
#
if [[ ! -e $HOME/.stack.debian ]]; then
  mkdir $HOME/.stack.debian
fi

#
# make sure the project links to it
#
if [[ ! -e $PWD/.stack.debian ]]; then
  ln -s $HOME/.stack.debian $PWD/.stack.debian
fi

#
# the docker command used to run the stack binary
#
STACKCMD="docker run --rm -v $PWD/.stack.debian:/home/debian/.stack -v $PWD:/project mgreenly/debian-stack:latest /usr/bin/stack --install-ghc"

#
# if stacks not setup do that
#
#if [ ! -e .stack.debian/config.yaml ]; then
#  STACK_INSTALL_ROOT_DIR=$(eval "$STACKCMD" setup)
#fi

#
# figure out where stack will install the binaries at
#
STACK_INSTALL_ROOT_DIR=$(eval "$STACKCMD" path | grep "local-install-root" | cut -f2 -d' ')
STACK_INSTALL_BIN_PATH=${STACK_INSTALL_ROOT_DIR}/bin

#
# stack only allows paths relative to the current directory
#
REL_STACK_BINDIR=${STACK_INSTALL_BIN_PATH#/project/}

#
# try to find the name of the executable as it's defined in the cabal file
# this pretty much assumes there's only one executable defined
#
CABAL_FILE=`find . -iname *.cabal -printf "%f"`
EXE_NAME=`grep -e '^executable' $CABAL_FILE | tr -s ' ' | cut -d' ' -f2`

#
# dump the vars and exit when debugging
#
#echo "STACK_INSTALL_ROOT_DIR=$STACK_INSTALL_ROOT_DIR"
#echo "STACK_INSTALL_BIN_PATH=$STACK_INSTALL_BIN_PATH"
#echo "REL_STACK_BINDIR      =$REL_STACK_BINDIR"
#echo "CABAL_FILE            =$CABAL_FILE"
#echo "EXE_NAME              =$EXE_NAME"
#exit
#
# the template for the Dockerfile.  Be sure to include any
# specific library dependencies you're application requires
#
cat << EOF > Dockerfile.debian
# vim:syntax=dockerfile

FROM debian:latest

ADD $REL_STACK_BINDIR /usr/local/bin

# if you need additional system packages add them
# here, or if you build a static application you
# can remove all the apt-get commands here.
RUN DEBIAN_FRONTEND=noninteractive                    \\
    apt-get -q -y update                              \\
    && apt-get                                        \\
      -o Dpkg::Options::="--force-confdef"            \\
      -o Dpkg::Options::="--force-confold"            \\
      -q -y install                                   \\
      libgmp10                                        \\
    && apt-get clean                                  \\
    && rm -rf /var/lib/apt/lists/*                    \\
    && adduser --disabled-password --gecos "" haskell

USER haskell

WORKDIR /home/haskell

CMD $EXE_NAME
EOF

#
# add lines to .dockerignore file
#
touch .dockerignore
grep -q -F '.stack.debian' .dockerignore || echo '.stack.debian' >> .dockerignore
grep -q -F '.stack-work/dist' .dockerignore || echo '.stack-work/dist' >> .dockerignore

#
# generate run.debian.sh file
#
cat << EOF > run.debian.sh
#!/bin/bash

#
# immediately exit if we access any unset variables
#
set -u

#
# pass all the necessary environment varialbes and any
# command line arguments to the container and run it
#
docker run --rm -it \\
  -e "USER=$USER" \\
  --log-driver=syslog \\
  --name $IMAGE_NAME \\
  $USER/$IMAGE_NAME:latest \\
  $IMAGE_NAME \$@
EOF
chmod +x run.debian.sh

#
# generate a build script
#
cat << EOF > build.debian.sh
#!/bin/bash

#
# this script automates the docker build process
#
IMAGE_NAME=$USER/$IMAGE_NAME

#
# make sure the base is current
#
docker pull debian:latest

#
# rebuild the application
#
debian-stack build --force-dirty

#
# get the tag and id of the current image/tag 
#
oldtag=\$(docker images --format="{{.ID}}:{{.Tag}}" \$IMAGE_NAME | grep -v latest | cut -f2 -d:)
oldid=\$(docker images --format="{{.ID}}:{{.Tag}}" \$IMAGE_NAME | grep latest | cut -f1 -d:)

#
# generate the tag for the new image and build it also tag it latest
#
newtag=\$(date +"%Y%m%d%H%M%S")
docker build -f Dockerfile.debian -t \$IMAGE_NAME:\$newtag .
docker tag \$IMAGE_NAME:"\$newtag" \$IMAGE_NAME:latest

if [[ -n "\$oldtag" ]]; then
  docker rmi \$IMAGE_NAME:\$oldtag
fi

#
# upload the new latest
#
#docker push $IMAGE_NAME:latest
EOF
chmod +x build.debian.sh



#
# output message
#
echo
echo "Project successfully dockerized, to build and run it do something like this..."
echo
echo "  debian-stack build"
echo "  docker build -f Dockerfile.debian -t $USER/$IMAGE_NAME ."
echo "  docker run --rm -it --name $IMAGE_NAME $USER/$IMAGE_NAME"
echo
